# Курсоры
В SQL курсор - это механизм для обработки результатов запроса построчно, позволяющий итеративно проходить по набору данных и выполнять операции над каждой строкой. Курсоры обычно используются, когда требуется обработка каждой строки данных, а не всего результирующего набора, например, для обновления данных в цикле или для выполнения последовательных операций над данными. 

## Основные понятия и операции с курсорами:

   -  Объявление курсора -  Определяет имя курсора, связанный с ним запрос и тип курсора.
   -  Открытие курсора -  Выполняет запрос и загружает результаты в область памяти, доступную для курсора.
   -  Перемещение по курсору -  Используются операторы, такие как FETCH, для извлечения следующей строки из курсора.
   -  Получение данных -  Извлеченные строки курсора можно использовать для выполнения различных операций, например, для обновления данных, вывода информации или передачи в другие процессы.
   -  Закрытие курсора -  Освобождает ресурсы, занимаемые курсором в памяти.
   -  Удаление курсора -  Полностью удаляет курсор из системы. 

## Основные понятия и операции с курсорами:

    Объявление курсора:
    Определяет имя курсора, связанный с ним запрос и тип курсора.
    Открытие курсора:
    Выполняет запрос и загружает результаты в область памяти, доступную для курсора.
    Перемещение по курсору:
    Используются операторы, такие как FETCH, для извлечения следующей строки из курсора.
    Получение данных:
    Извлеченные строки курсора можно использовать для выполнения различных операций, например, для обновления данных, вывода информации или передачи в другие процессы.
    Закрытие курсора:
    Освобождает ресурсы, занимаемые курсором в памяти.
    Удаление курсора:
    Полностью удаляет курсор из системы. 

```sql
DELIMITER //
CREATE PROCEDURE increase_salary()
BEGIN
  DECLARE done BOOLEAN DEFAULT FALSE;
  DECLARE emp_id INT;
  DECLARE emp_name VARCHAR(255);
  DECLARE cur CURSOR FOR SELECT id, name FROM employees WHERE id > 10;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur;

  read_loop: LOOP
    FETCH cur INTO emp_id, emp_name;
    IF done THEN
      LEAVE read_loop;
    END IF;
    UPDATE employees SET salary = salary * 1.10 WHERE id = emp_id;
    -- Можно добавить вывод информации о сотруднике, например:
    -- SELECT CONCAT('Увеличена зарплата для ', emp_name, ' (ID: ', emp_id, ')') AS message;
  END LOOP;

  CLOSE cur;
END //
DELIMITER ;
```

## Wildcards
В SQL подстановочные знаки (wildcards) используются с оператором LIKE в предложении WHERE для поиска шаблонов в строковых значениях столбцов. Наиболее распространенные подстановочные знаки: % (процент) и _ (подчеркивание). % заменяет ноль или более любых символов, а _ заменяет один любой символ. 
### Подстановочные знаки в SQL:

   -  % (процент):
    Этот подстановочный знак используется для поиска строки, которая содержит ноль или более любых символов.
        Например, SELECT * FROM Products WHERE ProductName LIKE 'Ch%'; найдет все продукты, названия которых начинаются с "Ch". 
   - _ (подчеркивание):
    Этот подстановочный знак используется для поиска строки, которая содержит ровно один любой символ.
        Например, SELECT * FROM Products WHERE ProductName LIKE '_h%'; найдет все продукты, названия которых начинаются с любого символа, за которым следует "h". 

### Примеры использования:

   -  ```sql SELECT * FROM Customers WHERE City LIKE 'S%';``` - Находит всех клиентов, живущих в городах, начинающихся на "S".
   -  ```sql SELECT * FROM Products WHERE ProductName LIKE '%T%';``` - Находит все продукты, в названии которых есть буква "T".
   -  ```sql SELECT * FROM Employees WHERE FirstName LIKE 'A____';``` - Находит всех сотрудников, чье имя начинается на "A" и имеет ровно 5 символов.
